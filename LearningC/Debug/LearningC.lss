
LearningC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000017a  0000020e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800108  00800108  00000216  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000216  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000098a  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000805  00000000  00000000  00000c7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000413  00000000  00000000  0000147f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001894  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041d  00000000  00000000  00001954  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000175  00000000  00000000  00001d71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001ee6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e7       	ldi	r30, 0x7A	; 122
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 30       	cpi	r26, 0x0A	; 10
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  9e:	0c 94 bb 00 	jmp	0x176	; 0x176 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_18>:
#include "USART_M328P.h"
uint8_t buffer;
volatile uint8_t Str_RX_flag = 0;


ISR(USART_RX_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
	buffer = UDR0;
  b2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  b6:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <buffer>
	Str_RX_flag =1;
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
}
  c0:	8f 91       	pop	r24
  c2:	0f 90       	pop	r0
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	0f 90       	pop	r0
  c8:	1f 90       	pop	r1
  ca:	18 95       	reti

000000cc <main>:


int main(void)
{
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
	USART0Init();
  d0:	0e 94 88 00 	call	0x110	; 0x110 <USART0Init>
	sei();
  d4:	78 94       	sei
	USART_putstring("A");
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	0e 94 a3 00 	call	0x146	; 0x146 <USART_putstring>
  de:	c5 e0       	ldi	r28, 0x05	; 5
  e0:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i =0; i<5;i++){// print
			int a ="hello";
			USART_putstring(a);
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	0e 94 a3 00 	call	0x146	; 0x146 <USART_putstring>
			USART_send_char(10);
  ea:	8a e0       	ldi	r24, 0x0A	; 10
  ec:	0e 94 b3 00 	call	0x166	; 0x166 <USART_send_char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	81 ee       	ldi	r24, 0xE1	; 225
  f4:	94 e0       	ldi	r25, 0x04	; 4
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x2a>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x34>
 100:	00 00       	nop
 102:	21 97       	sbiw	r28, 0x01	; 1
int main(void)
{
	USART0Init();
	sei();
	USART_putstring("A");
	for (int i =0; i<5;i++){// print
 104:	71 f7       	brne	.-36     	; 0xe2 <main+0x16>
	
	int a,b,c,d;
	a=b?c:d;
	if (b){a=c;}
	else {a=d;}
	}
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <USART0Init>:
{
	// Wait for byte to be received
	while(!(UCSR0A&(1<<RXC0))){};
	// Return received data
	return UDR0;
}
 110:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 114:	87 e6       	ldi	r24, 0x67	; 103
 116:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 11a:	e2 ec       	ldi	r30, 0xC2	; 194
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	86 60       	ori	r24, 0x06	; 6
 122:	80 83       	st	Z, r24
 124:	e1 ec       	ldi	r30, 0xC1	; 193
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	88 61       	ori	r24, 0x18	; 24
 12c:	80 83       	st	Z, r24
 12e:	80 81       	ld	r24, Z
 130:	80 68       	ori	r24, 0x80	; 128
 132:	80 83       	st	Z, r24
 134:	08 95       	ret

00000136 <USART0SendByte>:
 136:	e0 ec       	ldi	r30, 0xC0	; 192
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	90 81       	ld	r25, Z
 13c:	95 ff       	sbrs	r25, 5
 13e:	fd cf       	rjmp	.-6      	; 0x13a <USART0SendByte+0x4>
 140:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 144:	08 95       	ret

00000146 <USART_putstring>:

void USART_putstring(char* StringPtr){
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	ec 01       	movw	r28, r24
	
	while(*StringPtr != 0x00){
 14c:	88 81       	ld	r24, Y
 14e:	88 23       	and	r24, r24
 150:	39 f0       	breq	.+14     	; 0x160 <USART_putstring+0x1a>
 152:	21 96       	adiw	r28, 0x01	; 1
		USART0SendByte(*StringPtr);
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 9b 00 	call	0x136	; 0x136 <USART0SendByte>
	return UDR0;
}

void USART_putstring(char* StringPtr){
	
	while(*StringPtr != 0x00){
 15a:	89 91       	ld	r24, Y+
 15c:	81 11       	cpse	r24, r1
 15e:	fa cf       	rjmp	.-12     	; 0x154 <USART_putstring+0xe>
	StringPtr++;
	
	}
	
	
}
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <USART_send_char>:
void USART_send_char( char  data)
{
	//while the transmit buffer is not empty loop
	while(!(UCSR0A & (1<<UDRE0)));
 166:	e0 ec       	ldi	r30, 0xC0	; 192
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	90 81       	ld	r25, Z
 16c:	95 ff       	sbrs	r25, 5
 16e:	fd cf       	rjmp	.-6      	; 0x16a <USART_send_char+0x4>
	
	//when the buffer is empty write data to the transmitted
	UDR0 = data;
 170:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 174:	08 95       	ret

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
